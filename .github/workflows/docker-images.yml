name: Docker images

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build broker image
        run: docker build -t driftpursuit/broker:ci go-broker

      - name: Build bot runner image
        run: docker build -t driftpursuit/bot-runner:ci python-sim

      - name: Build web client image
        run: docker build -t driftpursuit/web-client:ci tunnelcave_sandbox_web

      - name: Read schema version
        id: schema
        run: echo "value=$(cat proto/SCHEMA_VERSION)" >> "$GITHUB_OUTPUT"

      - name: Tag schema version release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ steps.schema.outputs.value }}".trim();
            if (!version) {
              throw new Error('Failed to read schema version');
            }
            const tag = `refs/tags/schema/v${version}`;
            const existing = await github.rest.git.listMatchingRefs({
              ...context.repo,
              ref: `tags/schema/v${version}`,
            });
            if (existing.data.length > 0) {
              console.log(`Schema tag ${tag} already exists, skipping`);
              return;
            }
            await github.rest.git.createRef({
              ...context.repo,
              ref: tag,
              sha: context.sha,
            });
            console.log(`Created schema tag ${tag}`);
