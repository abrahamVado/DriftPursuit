// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: driftpursuit/broker/v0/streaming.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BrokerStreamService_StreamStateDiffs_FullMethodName = "/driftpursuit.broker.v0.BrokerStreamService/StreamStateDiffs"
	BrokerStreamService_PublishIntents_FullMethodName   = "/driftpursuit.broker.v0.BrokerStreamService/PublishIntents"
)

// BrokerStreamServiceClient is the client API for BrokerStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerStreamServiceClient interface {
	// StreamStateDiffs pushes compressed world diffs to connected bots.
	StreamStateDiffs(ctx context.Context, in *StreamStateDiffsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateDiffFrame], error)
	// PublishIntents ingests compressed control intents from bots.
	PublishIntents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[IntentFrame, IntentStreamAck], error)
}

type brokerStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerStreamServiceClient(cc grpc.ClientConnInterface) BrokerStreamServiceClient {
	return &brokerStreamServiceClient{cc}
}

func (c *brokerStreamServiceClient) StreamStateDiffs(ctx context.Context, in *StreamStateDiffsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StateDiffFrame], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerStreamService_ServiceDesc.Streams[0], BrokerStreamService_StreamStateDiffs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamStateDiffsRequest, StateDiffFrame]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerStreamService_StreamStateDiffsClient = grpc.ServerStreamingClient[StateDiffFrame]

func (c *brokerStreamServiceClient) PublishIntents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[IntentFrame, IntentStreamAck], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BrokerStreamService_ServiceDesc.Streams[1], BrokerStreamService_PublishIntents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IntentFrame, IntentStreamAck]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerStreamService_PublishIntentsClient = grpc.ClientStreamingClient[IntentFrame, IntentStreamAck]

// BrokerStreamServiceServer is the server API for BrokerStreamService service.
// All implementations must embed UnimplementedBrokerStreamServiceServer
// for forward compatibility.
type BrokerStreamServiceServer interface {
	// StreamStateDiffs pushes compressed world diffs to connected bots.
	StreamStateDiffs(*StreamStateDiffsRequest, grpc.ServerStreamingServer[StateDiffFrame]) error
	// PublishIntents ingests compressed control intents from bots.
	PublishIntents(grpc.ClientStreamingServer[IntentFrame, IntentStreamAck]) error
	mustEmbedUnimplementedBrokerStreamServiceServer()
}

// UnimplementedBrokerStreamServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBrokerStreamServiceServer struct{}

func (UnimplementedBrokerStreamServiceServer) StreamStateDiffs(*StreamStateDiffsRequest, grpc.ServerStreamingServer[StateDiffFrame]) error {
	return status.Errorf(codes.Unimplemented, "method StreamStateDiffs not implemented")
}
func (UnimplementedBrokerStreamServiceServer) PublishIntents(grpc.ClientStreamingServer[IntentFrame, IntentStreamAck]) error {
	return status.Errorf(codes.Unimplemented, "method PublishIntents not implemented")
}
func (UnimplementedBrokerStreamServiceServer) mustEmbedUnimplementedBrokerStreamServiceServer() {}
func (UnimplementedBrokerStreamServiceServer) testEmbeddedByValue()                             {}

// UnsafeBrokerStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerStreamServiceServer will
// result in compilation errors.
type UnsafeBrokerStreamServiceServer interface {
	mustEmbedUnimplementedBrokerStreamServiceServer()
}

func RegisterBrokerStreamServiceServer(s grpc.ServiceRegistrar, srv BrokerStreamServiceServer) {
	// If the following call pancis, it indicates UnimplementedBrokerStreamServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BrokerStreamService_ServiceDesc, srv)
}

func _BrokerStreamService_StreamStateDiffs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamStateDiffsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerStreamServiceServer).StreamStateDiffs(m, &grpc.GenericServerStream[StreamStateDiffsRequest, StateDiffFrame]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerStreamService_StreamStateDiffsServer = grpc.ServerStreamingServer[StateDiffFrame]

func _BrokerStreamService_PublishIntents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerStreamServiceServer).PublishIntents(&grpc.GenericServerStream[IntentFrame, IntentStreamAck]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BrokerStreamService_PublishIntentsServer = grpc.ClientStreamingServer[IntentFrame, IntentStreamAck]

// BrokerStreamService_ServiceDesc is the grpc.ServiceDesc for BrokerStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BrokerStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driftpursuit.broker.v0.BrokerStreamService",
	HandlerType: (*BrokerStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStateDiffs",
			Handler:       _BrokerStreamService_StreamStateDiffs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PublishIntents",
			Handler:       _BrokerStreamService_PublishIntents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "driftpursuit/broker/v0/streaming.proto",
}
