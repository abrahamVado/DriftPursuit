// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: driftpursuit/broker/v0/streaming.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StreamStateDiffsRequest registers a bot to receive authoritative state diffs.
type StreamStateDiffsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 1.- client_id lets the broker attribute throttling metrics to the stream source.
	ClientId      string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamStateDiffsRequest) Reset() {
	*x = StreamStateDiffsRequest{}
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamStateDiffsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStateDiffsRequest) ProtoMessage() {}

func (x *StreamStateDiffsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStateDiffsRequest.ProtoReflect.Descriptor instead.
func (*StreamStateDiffsRequest) Descriptor() ([]byte, []int) {
	return file_driftpursuit_broker_v0_streaming_proto_rawDescGZIP(), []int{0}
}

func (x *StreamStateDiffsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// StateDiffFrame carries a compressed JSON diff for a single simulation tick.
type StateDiffFrame struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 1.- tick identifies the authoritative simulation tick for reconciliation.
	Tick uint64 `protobuf:"varint,1,opt,name=tick,proto3" json:"tick,omitempty"`
	// 2.- encoding specifies the compression codec applied to the payload.
	Encoding string `protobuf:"bytes,2,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// 3.- payload contains the compressed JSON representation of the world diff.
	Payload       []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateDiffFrame) Reset() {
	*x = StateDiffFrame{}
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateDiffFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateDiffFrame) ProtoMessage() {}

func (x *StateDiffFrame) ProtoReflect() protoreflect.Message {
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateDiffFrame.ProtoReflect.Descriptor instead.
func (*StateDiffFrame) Descriptor() ([]byte, []int) {
	return file_driftpursuit_broker_v0_streaming_proto_rawDescGZIP(), []int{1}
}

func (x *StateDiffFrame) GetTick() uint64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *StateDiffFrame) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *StateDiffFrame) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// IntentFrame uploads a compressed JSON intent payload from a bot controller.
type IntentFrame struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 1.- client_id identifies the publishing stream for sequencing and metrics.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// 2.- encoding indicates how the payload bytes were compressed (for example "gzip").
	Encoding string `protobuf:"bytes,2,opt,name=encoding,proto3" json:"encoding,omitempty"`
	// 3.- payload holds the compressed JSON representation of the driftpursuit.broker.v0.Intent message.
	Payload       []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntentFrame) Reset() {
	*x = IntentFrame{}
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntentFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentFrame) ProtoMessage() {}

func (x *IntentFrame) ProtoReflect() protoreflect.Message {
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentFrame.ProtoReflect.Descriptor instead.
func (*IntentFrame) Descriptor() ([]byte, []int) {
	return file_driftpursuit_broker_v0_streaming_proto_rawDescGZIP(), []int{2}
}

func (x *IntentFrame) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *IntentFrame) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *IntentFrame) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// IntentStreamAck summarises the accepted and rejected frames after a publish session.
type IntentStreamAck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 1.- accepted counts how many intents were ingested successfully.
	Accepted uint64 `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
	// 2.- rejected counts how many intents were dropped due to validation or decoding failures.
	Rejected      uint64 `protobuf:"varint,2,opt,name=rejected,proto3" json:"rejected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntentStreamAck) Reset() {
	*x = IntentStreamAck{}
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntentStreamAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntentStreamAck) ProtoMessage() {}

func (x *IntentStreamAck) ProtoReflect() protoreflect.Message {
	mi := &file_driftpursuit_broker_v0_streaming_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntentStreamAck.ProtoReflect.Descriptor instead.
func (*IntentStreamAck) Descriptor() ([]byte, []int) {
	return file_driftpursuit_broker_v0_streaming_proto_rawDescGZIP(), []int{3}
}

func (x *IntentStreamAck) GetAccepted() uint64 {
	if x != nil {
		return x.Accepted
	}
	return 0
}

func (x *IntentStreamAck) GetRejected() uint64 {
	if x != nil {
		return x.Rejected
	}
	return 0
}

var File_driftpursuit_broker_v0_streaming_proto protoreflect.FileDescriptor

const file_driftpursuit_broker_v0_streaming_proto_rawDesc = "" +
	"\n" +
	"&driftpursuit/broker/v0/streaming.proto\x12\x16driftpursuit.broker.v0\"6\n" +
	"\x17StreamStateDiffsRequest\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\"Z\n" +
	"\x0eStateDiffFrame\x12\x12\n" +
	"\x04tick\x18\x01 \x01(\x04R\x04tick\x12\x1a\n" +
	"\bencoding\x18\x02 \x01(\tR\bencoding\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\"`\n" +
	"\vIntentFrame\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x1a\n" +
	"\bencoding\x18\x02 \x01(\tR\bencoding\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\"I\n" +
	"\x0fIntentStreamAck\x12\x1a\n" +
	"\baccepted\x18\x01 \x01(\x04R\baccepted\x12\x1a\n" +
	"\brejected\x18\x02 \x01(\x04R\brejected2\xe6\x01\n" +
	"\x13BrokerStreamService\x12m\n" +
	"\x10StreamStateDiffs\x12/.driftpursuit.broker.v0.StreamStateDiffsRequest\x1a&.driftpursuit.broker.v0.StateDiffFrame0\x01\x12`\n" +
	"\x0ePublishIntents\x12#.driftpursuit.broker.v0.IntentFrame\x1a'.driftpursuit.broker.v0.IntentStreamAck(\x01B*Z(driftpursuit/broker/internal/proto/pb;pbb\x06proto3"

var (
	file_driftpursuit_broker_v0_streaming_proto_rawDescOnce sync.Once
	file_driftpursuit_broker_v0_streaming_proto_rawDescData []byte
)

func file_driftpursuit_broker_v0_streaming_proto_rawDescGZIP() []byte {
	file_driftpursuit_broker_v0_streaming_proto_rawDescOnce.Do(func() {
		file_driftpursuit_broker_v0_streaming_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_driftpursuit_broker_v0_streaming_proto_rawDesc), len(file_driftpursuit_broker_v0_streaming_proto_rawDesc)))
	})
	return file_driftpursuit_broker_v0_streaming_proto_rawDescData
}

var file_driftpursuit_broker_v0_streaming_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_driftpursuit_broker_v0_streaming_proto_goTypes = []any{
	(*StreamStateDiffsRequest)(nil), // 0: driftpursuit.broker.v0.StreamStateDiffsRequest
	(*StateDiffFrame)(nil),          // 1: driftpursuit.broker.v0.StateDiffFrame
	(*IntentFrame)(nil),             // 2: driftpursuit.broker.v0.IntentFrame
	(*IntentStreamAck)(nil),         // 3: driftpursuit.broker.v0.IntentStreamAck
}
var file_driftpursuit_broker_v0_streaming_proto_depIdxs = []int32{
	0, // 0: driftpursuit.broker.v0.BrokerStreamService.StreamStateDiffs:input_type -> driftpursuit.broker.v0.StreamStateDiffsRequest
	2, // 1: driftpursuit.broker.v0.BrokerStreamService.PublishIntents:input_type -> driftpursuit.broker.v0.IntentFrame
	1, // 2: driftpursuit.broker.v0.BrokerStreamService.StreamStateDiffs:output_type -> driftpursuit.broker.v0.StateDiffFrame
	3, // 3: driftpursuit.broker.v0.BrokerStreamService.PublishIntents:output_type -> driftpursuit.broker.v0.IntentStreamAck
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_driftpursuit_broker_v0_streaming_proto_init() }
func file_driftpursuit_broker_v0_streaming_proto_init() {
	if File_driftpursuit_broker_v0_streaming_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_driftpursuit_broker_v0_streaming_proto_rawDesc), len(file_driftpursuit_broker_v0_streaming_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_driftpursuit_broker_v0_streaming_proto_goTypes,
		DependencyIndexes: file_driftpursuit_broker_v0_streaming_proto_depIdxs,
		MessageInfos:      file_driftpursuit_broker_v0_streaming_proto_msgTypes,
	}.Build()
	File_driftpursuit_broker_v0_streaming_proto = out.File
	file_driftpursuit_broker_v0_streaming_proto_goTypes = nil
	file_driftpursuit_broker_v0_streaming_proto_depIdxs = nil
}
