// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.21.12
// source: internal/proto/events.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED        EventType = 0
	EventType_EVENT_TYPE_SPAWNED            EventType = 1
	EventType_EVENT_TYPE_DESTROYED          EventType = 2
	EventType_EVENT_TYPE_COLLISION          EventType = 3
	EventType_EVENT_TYPE_OBJECTIVE_CAPTURED EventType = 4
	EventType_EVENT_TYPE_SCORE_UPDATE       EventType = 5
	EventType_EVENT_TYPE_SENSOR_CONTACT     EventType = 6
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_SPAWNED",
		2: "EVENT_TYPE_DESTROYED",
		3: "EVENT_TYPE_COLLISION",
		4: "EVENT_TYPE_OBJECTIVE_CAPTURED",
		5: "EVENT_TYPE_SCORE_UPDATE",
		6: "EVENT_TYPE_SENSOR_CONTACT",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":        0,
		"EVENT_TYPE_SPAWNED":            1,
		"EVENT_TYPE_DESTROYED":          2,
		"EVENT_TYPE_COLLISION":          3,
		"EVENT_TYPE_OBJECTIVE_CAPTURED": 4,
		"EVENT_TYPE_SCORE_UPDATE":       5,
		"EVENT_TYPE_SENSOR_CONTACT":     6,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_events_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_internal_proto_events_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_events_proto_rawDescGZIP(), []int{0}
}

type CombatEventKind int32

const (
	CombatEventKind_COMBAT_EVENT_KIND_UNSPECIFIED    CombatEventKind = 0
	CombatEventKind_COMBAT_EVENT_KIND_WEAPON_FIRED   CombatEventKind = 1
	CombatEventKind_COMBAT_EVENT_KIND_DIRECT_HIT     CombatEventKind = 2
	CombatEventKind_COMBAT_EVENT_KIND_AREA_EFFECT    CombatEventKind = 3
	CombatEventKind_COMBAT_EVENT_KIND_KILL_CONFIRMED CombatEventKind = 4
	CombatEventKind_COMBAT_EVENT_KIND_SHIELD_BREAK   CombatEventKind = 5
)

// Enum value maps for CombatEventKind.
var (
	CombatEventKind_name = map[int32]string{
		0: "COMBAT_EVENT_KIND_UNSPECIFIED",
		1: "COMBAT_EVENT_KIND_WEAPON_FIRED",
		2: "COMBAT_EVENT_KIND_DIRECT_HIT",
		3: "COMBAT_EVENT_KIND_AREA_EFFECT",
		4: "COMBAT_EVENT_KIND_KILL_CONFIRMED",
		5: "COMBAT_EVENT_KIND_SHIELD_BREAK",
	}
	CombatEventKind_value = map[string]int32{
		"COMBAT_EVENT_KIND_UNSPECIFIED":    0,
		"COMBAT_EVENT_KIND_WEAPON_FIRED":   1,
		"COMBAT_EVENT_KIND_DIRECT_HIT":     2,
		"COMBAT_EVENT_KIND_AREA_EFFECT":    3,
		"COMBAT_EVENT_KIND_KILL_CONFIRMED": 4,
		"COMBAT_EVENT_KIND_SHIELD_BREAK":   5,
	}
)

func (x CombatEventKind) Enum() *CombatEventKind {
	p := new(CombatEventKind)
	*p = x
	return p
}

func (x CombatEventKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CombatEventKind) Descriptor() protoreflect.EnumDescriptor {
	return file_internal_proto_events_proto_enumTypes[1].Descriptor()
}

func (CombatEventKind) Type() protoreflect.EnumType {
	return &file_internal_proto_events_proto_enumTypes[1]
}

func (x CombatEventKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CombatEventKind.Descriptor instead.
func (CombatEventKind) EnumDescriptor() ([]byte, []int) {
	return file_internal_proto_events_proto_rawDescGZIP(), []int{1}
}

// Event stream emitted alongside snapshots describing discrete gameplay updates.
type GameEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SchemaVersion    string                 `protobuf:"bytes,1,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	EventId          string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	OccurredAtMs     int64                  `protobuf:"varint,3,opt,name=occurred_at_ms,json=occurredAtMs,proto3" json:"occurred_at_ms,omitempty"`
	Type             EventType              `protobuf:"varint,4,opt,name=type,proto3,enum=driftpursuit.networking.v1.EventType" json:"type,omitempty"`
	PrimaryEntityId  string                 `protobuf:"bytes,5,opt,name=primary_entity_id,json=primaryEntityId,proto3" json:"primary_entity_id,omitempty"`
	RelatedEntityIds []string               `protobuf:"bytes,6,rep,name=related_entity_ids,json=relatedEntityIds,proto3" json:"related_entity_ids,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GameEvent) Reset() {
	*x = GameEvent{}
	mi := &file_internal_proto_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvent) ProtoMessage() {}

func (x *GameEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvent.ProtoReflect.Descriptor instead.
func (*GameEvent) Descriptor() ([]byte, []int) {
	return file_internal_proto_events_proto_rawDescGZIP(), []int{0}
}

func (x *GameEvent) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *GameEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *GameEvent) GetOccurredAtMs() int64 {
	if x != nil {
		return x.OccurredAtMs
	}
	return 0
}

func (x *GameEvent) GetType() EventType {
	if x != nil {
		return x.Type
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *GameEvent) GetPrimaryEntityId() string {
	if x != nil {
		return x.PrimaryEntityId
	}
	return ""
}

func (x *GameEvent) GetRelatedEntityIds() []string {
	if x != nil {
		return x.RelatedEntityIds
	}
	return nil
}

func (x *GameEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CombatEvent conveys detailed combat telemetry for analytics and HUD updates.
type CombatEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SchemaVersion    string                 `protobuf:"bytes,1,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	EventId          string                 `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	OccurredAtMs     int64                  `protobuf:"varint,3,opt,name=occurred_at_ms,json=occurredAtMs,proto3" json:"occurred_at_ms,omitempty"`
	Kind             CombatEventKind        `protobuf:"varint,4,opt,name=kind,proto3,enum=driftpursuit.networking.v1.CombatEventKind" json:"kind,omitempty"`
	AttackerEntityId string                 `protobuf:"bytes,5,opt,name=attacker_entity_id,json=attackerEntityId,proto3" json:"attacker_entity_id,omitempty"`
	DefenderEntityId string                 `protobuf:"bytes,6,opt,name=defender_entity_id,json=defenderEntityId,proto3" json:"defender_entity_id,omitempty"`
	Position         *Vector3               `protobuf:"bytes,7,opt,name=position,proto3" json:"position,omitempty"`
	Direction        *Vector3               `protobuf:"bytes,8,opt,name=direction,proto3" json:"direction,omitempty"`
	Damage           *DamageSummary         `protobuf:"bytes,9,opt,name=damage,proto3" json:"damage,omitempty"`
	Metadata         map[string]string      `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CombatEvent) Reset() {
	*x = CombatEvent{}
	mi := &file_internal_proto_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CombatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombatEvent) ProtoMessage() {}

func (x *CombatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombatEvent.ProtoReflect.Descriptor instead.
func (*CombatEvent) Descriptor() ([]byte, []int) {
	return file_internal_proto_events_proto_rawDescGZIP(), []int{1}
}

func (x *CombatEvent) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *CombatEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CombatEvent) GetOccurredAtMs() int64 {
	if x != nil {
		return x.OccurredAtMs
	}
	return 0
}

func (x *CombatEvent) GetKind() CombatEventKind {
	if x != nil {
		return x.Kind
	}
	return CombatEventKind_COMBAT_EVENT_KIND_UNSPECIFIED
}

func (x *CombatEvent) GetAttackerEntityId() string {
	if x != nil {
		return x.AttackerEntityId
	}
	return ""
}

func (x *CombatEvent) GetDefenderEntityId() string {
	if x != nil {
		return x.DefenderEntityId
	}
	return ""
}

func (x *CombatEvent) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *CombatEvent) GetDirection() *Vector3 {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *CombatEvent) GetDamage() *DamageSummary {
	if x != nil {
		return x.Damage
	}
	return nil
}

func (x *CombatEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// DamageSummary captures the numeric and categorical breakdown of combat damage.
type DamageSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Amount        float64                `protobuf:"fixed64,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Critical      bool                   `protobuf:"varint,3,opt,name=critical,proto3" json:"critical,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DamageSummary) Reset() {
	*x = DamageSummary{}
	mi := &file_internal_proto_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DamageSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DamageSummary) ProtoMessage() {}

func (x *DamageSummary) ProtoReflect() protoreflect.Message {
	mi := &file_internal_proto_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DamageSummary.ProtoReflect.Descriptor instead.
func (*DamageSummary) Descriptor() ([]byte, []int) {
	return file_internal_proto_events_proto_rawDescGZIP(), []int{2}
}

func (x *DamageSummary) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *DamageSummary) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DamageSummary) GetCritical() bool {
	if x != nil {
		return x.Critical
	}
	return false
}

var File_internal_proto_events_proto protoreflect.FileDescriptor

var file_internal_proto_events_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x64,
	0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x67, 0x6f, 0x2d, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x96, 0x03, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x64, 0x41, 0x74, 0x4d, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72, 0x73, 0x75,
	0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64,
	0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe9, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x4d, 0x73,
	0x12, 0x3f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72, 0x73, 0x75, 0x69, 0x74,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x06, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70, 0x75,
	0x72, 0x73, 0x75, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x57, 0x0a, 0x0d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x2a, 0xd2, 0x01,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x41, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x54,
	0x55, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54,
	0x10, 0x06, 0x2a, 0xe7, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x62, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d,
	0x42, 0x41, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57,
	0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x49, 0x54, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x42, 0x41, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4d, 0x42,
	0x41, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x48,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x10, 0x05, 0x42, 0x52, 0x0a, 0x24,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70,
	0x75, 0x72, 0x73, 0x75, 0x69, 0x74, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x28, 0x64, 0x72, 0x69, 0x66, 0x74, 0x70, 0x75, 0x72,
	0x73, 0x75, 0x69, 0x74, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x3b, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_proto_events_proto_rawDescOnce sync.Once
	file_internal_proto_events_proto_rawDescData = file_internal_proto_events_proto_rawDesc
)

func file_internal_proto_events_proto_rawDescGZIP() []byte {
	file_internal_proto_events_proto_rawDescOnce.Do(func() {
		file_internal_proto_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_proto_events_proto_rawDescData)
	})
	return file_internal_proto_events_proto_rawDescData
}

var file_internal_proto_events_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_internal_proto_events_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_internal_proto_events_proto_goTypes = []any{
	(EventType)(0),        // 0: driftpursuit.networking.v1.EventType
	(CombatEventKind)(0),  // 1: driftpursuit.networking.v1.CombatEventKind
	(*GameEvent)(nil),     // 2: driftpursuit.networking.v1.GameEvent
	(*CombatEvent)(nil),   // 3: driftpursuit.networking.v1.CombatEvent
	(*DamageSummary)(nil), // 4: driftpursuit.networking.v1.DamageSummary
	nil,                   // 5: driftpursuit.networking.v1.GameEvent.MetadataEntry
	nil,                   // 6: driftpursuit.networking.v1.CombatEvent.MetadataEntry
	(*Vector3)(nil),       // 7: driftpursuit.networking.v1.Vector3
}
var file_internal_proto_events_proto_depIdxs = []int32{
	0, // 0: driftpursuit.networking.v1.GameEvent.type:type_name -> driftpursuit.networking.v1.EventType
	5, // 1: driftpursuit.networking.v1.GameEvent.metadata:type_name -> driftpursuit.networking.v1.GameEvent.MetadataEntry
	1, // 2: driftpursuit.networking.v1.CombatEvent.kind:type_name -> driftpursuit.networking.v1.CombatEventKind
	7, // 3: driftpursuit.networking.v1.CombatEvent.position:type_name -> driftpursuit.networking.v1.Vector3
	7, // 4: driftpursuit.networking.v1.CombatEvent.direction:type_name -> driftpursuit.networking.v1.Vector3
	4, // 5: driftpursuit.networking.v1.CombatEvent.damage:type_name -> driftpursuit.networking.v1.DamageSummary
	6, // 6: driftpursuit.networking.v1.CombatEvent.metadata:type_name -> driftpursuit.networking.v1.CombatEvent.MetadataEntry
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_internal_proto_events_proto_init() }
func file_internal_proto_events_proto_init() {
	if File_internal_proto_events_proto != nil {
		return
	}
	file_go_broker_internal_proto_types_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_proto_events_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_proto_events_proto_goTypes,
		DependencyIndexes: file_internal_proto_events_proto_depIdxs,
		EnumInfos:         file_internal_proto_events_proto_enumTypes,
		MessageInfos:      file_internal_proto_events_proto_msgTypes,
	}.Build()
	File_internal_proto_events_proto = out.File
	file_internal_proto_events_proto_rawDesc = nil
	file_internal_proto_events_proto_goTypes = nil
	file_internal_proto_events_proto_depIdxs = nil
}
