"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/gameplay/page",{

/***/ "(app-pages-browser)/./src/enemies/stellated-octahedron/behavior.ts":
/*!******************************************************!*\
  !*** ./src/enemies/stellated-octahedron/behavior.ts ***!
  \******************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEnemy: () => (/* binding */ createEnemy),\n/* harmony export */   updateEnemies: () => (/* binding */ updateEnemies)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/examples/jsm/utils/BufferGeometryUtils.js */ \"(app-pages-browser)/./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\");\n/* harmony import */ var _engine_difficulty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/engine/difficulty */ \"(app-pages-browser)/./src/engine/difficulty.ts\");\n\n\n\nfunction disposeMeshLike(object) {\n    // 1. Traverse any composed mesh tree and release GPU buffers and materials.\n    const disposedMaterials = new Set();\n    object.traverse((child)=>{\n        if (!(child instanceof three__WEBPACK_IMPORTED_MODULE_1__.Mesh)) return;\n        child.geometry.dispose();\n        const material = child.material;\n        if (Array.isArray(material)) {\n            for (const mat of material){\n                if (!disposedMaterials.has(mat)) {\n                    var _mat_dispose;\n                    (_mat_dispose = mat.dispose) === null || _mat_dispose === void 0 ? void 0 : _mat_dispose.call(mat);\n                    disposedMaterials.add(mat);\n                }\n            }\n        } else if (!disposedMaterials.has(material)) {\n            var _material_dispose;\n            (_material_dispose = material.dispose) === null || _material_dispose === void 0 ? void 0 : _material_dispose.call(material);\n            disposedMaterials.add(material);\n        }\n    });\n}\nfunction buildStellatedOctahedron() {\n    let size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 6, variant = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'pursuer';\n    const group = new three__WEBPACK_IMPORTED_MODULE_1__.Group();\n    // 1. Generate two tetrahedron geometries and mirror one to reproduce the stellated octahedron shell.\n    const primary = new three__WEBPACK_IMPORTED_MODULE_1__.TetrahedronGeometry(size * 0.8, 1); // Higher detail for sharper edges\n    const mirrored = primary.clone();\n    mirrored.rotateX(Math.PI);\n    mirrored.rotateZ(Math.PI / 2);\n    // 2. Merge both buffer geometries using the supported helper to avoid the removed Geometry.merge API.\n    const merged = (0,three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_2__.mergeGeometries)([\n        primary,\n        mirrored\n    ], false);\n    if (!merged) throw new Error('Failed to merge stellated octahedron geometry');\n    // 3. Dispose the temporary parts.\n    primary.dispose();\n    mirrored.dispose();\n    // Enhanced body material: Dynamic based on variant for visual distinction\n    let bodyColor = 0xff5533; // Base orange-red\n    let emissive = 0x220000;\n    let roughness = 0.6;\n    let metalness = 0.2;\n    switch(variant){\n        case 'strafer':\n            bodyColor = 0x00ff88; // Neon green for agile flanker\n            emissive = 0x004400;\n            roughness = 0.4;\n            metalness = 0.4;\n            break;\n        case 'sentry':\n            bodyColor = 0x8b0000; // Dark red for stationary turret\n            emissive = 0x440000;\n            roughness = 0.8;\n            metalness = 0.1;\n            break;\n    }\n    const bodyMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n        color: bodyColor,\n        metalness,\n        roughness,\n        emissive,\n        emissiveIntensity: 0.3 // Pulsing glow potential\n    });\n    const body = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(merged, bodyMaterial);\n    group.add(body);\n    // Add menacing spikes: Procedural, variant-specific count and style for danger\n    const spikeGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.ConeGeometry(0.4, 2, 5);\n    const spikeMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n        color: 0x111111,\n        roughness: 0.1,\n        metalness: 0.95 // Razor-sharp reflection\n    });\n    const spikeCount = variant === 'sentry' ? 8 : variant === 'strafer' ? 12 : 6; // More for aggressive variants\n    for(let i = 0; i < spikeCount; i++){\n        const angle = i / spikeCount * Math.PI * 2;\n        const radius = size * 0.7;\n        const heightOffset = (Math.random() - 0.5) * 0.5;\n        const spikePos = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(Math.cos(angle) * radius, heightOffset, Math.sin(angle) * radius);\n        const spike = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(spikeGeometry, spikeMaterial);\n        spike.position.copy(spikePos);\n        // Orient spikes radially outward\n        spike.lookAt(spikePos.clone().multiplyScalar(2));\n        spike.rotateX(Math.PI); // Flip to point out\n        group.add(spike);\n        // Secondary barbs on spikes for extra threat\n        if (Math.random() > 0.3) {\n            const barb = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(0.2, 0.2, 1.5), spikeMaterial);\n            barb.position.copy(spikePos.clone().add(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3(0, 0, -1)));\n            barb.rotation.set(Math.random() * Math.PI, Math.random() * Math.PI, 0);\n            group.add(barb);\n        }\n    }\n    // Glowing core: Emissive sphere for a volatile energy heart\n    const coreGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.SphereGeometry(size * 0.3, 12, 8);\n    const coreMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n        color: 0xff0000,\n        emissive: 0xff0000,\n        emissiveIntensity: 0.6,\n        transparent: true,\n        opacity: 0.8\n    });\n    const core = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(coreGeometry, coreMaterial);\n    core.position.set(0, 0, 0);\n    group.add(core);\n    // Variant-specific accents\n    if (variant === 'strafer') {\n        // Side vents for speed implication\n        const ventGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.BoxGeometry(1.5, 0.3, 3);\n        const ventMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0x00ff88,\n            emissive: 0x004400\n        });\n        const leftVent = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(ventGeometry, ventMaterial);\n        leftVent.position.set(-size * 0.6, 0, 0);\n        group.add(leftVent);\n        const rightVent = leftVent.clone();\n        rightVent.position.set(size * 0.6, 0, 0);\n        group.add(rightVent);\n    } else if (variant === 'sentry') {\n        // Turret base for grounded feel\n        const baseGeometry = new three__WEBPACK_IMPORTED_MODULE_1__.CylinderGeometry(size * 0.9, size * 1.1, 0.5, 8);\n        const baseMaterial = new three__WEBPACK_IMPORTED_MODULE_1__.MeshStandardMaterial({\n            color: 0x333333,\n            roughness: 0.9\n        });\n        const base = new three__WEBPACK_IMPORTED_MODULE_1__.Mesh(baseGeometry, baseMaterial);\n        base.position.set(0, -size * 0.6, 0);\n        group.add(base);\n    }\n    // Animation hook: Subtle idle rotation and pulse\n    group.userData = {\n        originalEmissive: bodyMaterial.emissive.clone(),\n        pulseTime: 0,\n        variant\n    };\n    return group;\n}\nfunction createEnemy(scene, position) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    var _scene;\n    // 1. Materialise the mesh, position it, and append it to the active scene graph.\n    const mesh = buildStellatedOctahedron(5, options.variant);\n    mesh.position.copy(position);\n    scene.add(mesh);\n    const vel = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\n    const dir = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();\n    var _options_difficulty;\n    const difficulty = (_options_difficulty = options.difficulty) !== null && _options_difficulty !== void 0 ? _options_difficulty : (0,_engine_difficulty__WEBPACK_IMPORTED_MODULE_0__.getDifficultyState)();\n    const hpBase = 40 * difficulty.enemyHpMultiplier;\n    const acceleration = 18 + difficulty.enemyDpsMultiplier * 6 + (options.variant === 'strafer' ? 4 : 0);\n    const maxSpeed = 36 + difficulty.enemyDpsMultiplier * 8 + (options.variant === 'strafer' ? 10 : 0);\n    const obj = {\n        mesh,\n        hp: hpBase,\n        difficulty,\n        target: undefined,\n        update (dt) {\n            var _mesh_children_;\n            // Enhanced update: Add idle animation and variant-specific behaviors\n            const userData = mesh.userData;\n            userData.pulseTime += dt;\n            // Pulse emissive for threat\n            const pulse = 0.2 + Math.sin(userData.pulseTime * 3) * 0.1;\n            if ((_mesh_children_ = mesh.children[0]) === null || _mesh_children_ === void 0 ? void 0 : _mesh_children_.material) {\n                mesh.children[0].material.emissiveIntensity = 0.3 + pulse * 0.2;\n            }\n            if (userData.variant === 'sentry') {\n                // Sentry: Slow turret rotation only when targeting\n                if (this.target) mesh.rotation.y += dt * 0.5;\n            } else {\n                // Others: Gentle idle spin\n                mesh.rotation.y += dt * 0.01;\n            }\n            if (this.target) {\n                dir.copy(this.target.position).sub(mesh.position);\n                const distance = dir.length() || 1;\n                dir.normalize();\n                const aimAssist = three__WEBPACK_IMPORTED_MODULE_1__.MathUtils.lerp(0.6, 1, difficulty.enemyAccuracy);\n                vel.addScaledVector(dir, acceleration * aimAssist * dt);\n                (0,_engine_difficulty__WEBPACK_IMPORTED_MODULE_0__.applyEnvironmentVectorAttenuation)(vel);\n                const clamped = Math.min(maxSpeed, maxSpeed * (distance > 180 ? 1.1 : 1));\n                vel.clampLength(0, clamped);\n                mesh.position.addScaledVector(vel, dt);\n                mesh.lookAt(this.target.position);\n                // Strafer: Zigzag pattern for evasion\n                if (userData.variant === 'strafer' && Math.random() < 0.02) {\n                    vel.add(new three__WEBPACK_IMPORTED_MODULE_1__.Vector3((Math.random() - 0.5) * 20, 0, 0));\n                }\n            }\n        },\n        onDeath () {\n            scene.remove(mesh);\n            disposeMeshLike(mesh);\n        }\n    };\n    // 2. Track the enemy so the wave manager can iterate and update per frame.\n    ;\n    var ___enemies;\n    (___enemies = (_scene = scene).__enemies) !== null && ___enemies !== void 0 ? ___enemies : _scene.__enemies = [];\n    ;\n    scene.__enemies.push(obj);\n    return obj;\n}\nfunction updateEnemies(scene, dt, difficulty) {\n    // 1. Advance each tracked enemy AI using the shared scene registry.\n    const arr = scene.__enemies;\n    if (!arr) return;\n    for (const e of arr){\n        e.difficulty = difficulty;\n        e.update(dt);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/enemies/stellated-octahedron/behavior.ts\n"));

/***/ })

});