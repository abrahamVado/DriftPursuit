"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/gameplay/page",{

/***/ "(app-pages-browser)/./src/world/chunks/streamer.ts":
/*!**************************************!*\
  !*** ./src/world/chunks/streamer.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStreamer: () => (/* binding */ createStreamer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _generateHeight__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generateHeight */ \"(app-pages-browser)/./src/world/chunks/generateHeight.ts\");\n/* harmony import */ var _engine_difficulty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/engine/difficulty */ \"(app-pages-browser)/./src/engine/difficulty.ts\");\n/* harmony import */ var three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three/examples/jsm/utils/BufferGeometryUtils.js */ \"(app-pages-browser)/./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js\");\n// TerrainStreamer.ts\n\n\n\n// ✅ merge helper must be imported from examples utils (not THREE namespace)\n\n/* ──────────────────────────────────────────────────────────────────────────\n   CONFIG\n   ────────────────────────────────────────────────────────────────────────── */ const CHUNK_SIZE = 512;\nconst GRID_SEGMENTS = 100 // PlaneGeometry(..., wSegs, hSegs)\n;\nconst ACTIVE_RADIUS = 5 // in chunks (Chebyshev distance)\n;\nconst FADE_DURATION = 1.0 // seconds\n;\nconst SKIRT_DROP = 12 // vertical extrusion to hide transient gaps\n;\nconst TILE_REPEAT = 8 // UV tiling for the terrain texture\n;\nconst ROCKS_PER_DENSITY_UNIT = 16 // propDensity × this\n;\n/* ──────────────────────────────────────────────────────────────────────────\n   UTILITIES\n   ────────────────────────────────────────────────────────────────────────── */ const HALF = CHUNK_SIZE / 2;\nconst key = (ix, iz)=>\"\".concat(ix, \",\").concat(iz);\nconst toChunk = (x)=>Math.floor(x / CHUNK_SIZE);\n// Stable seeded RNG so decorations don’t “pop” when re-decorating\nfunction mulberry32(seed) {\n    return function() {\n        let t = seed += 0x6d2b79f5;\n        t = Math.imul(t ^ t >>> 15, t | 1);\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\n    };\n}\nconst hash2i = (a, b)=>{\n    // simple 2D int hash → int\n    let h = a | 0;\n    h = Math.imul(h ^ 0x9e3779b1, 0x85ebca6b);\n    h ^= b | 0;\n    h = Math.imul(h ^ 0xc2b2ae35, 0x27d4eb2f);\n    return h >>> 0;\n};\n/* ──────────────────────────────────────────────────────────────────────────\n   SHARED RESOURCES\n   ────────────────────────────────────────────────────────────────────────── */ let envCache = (0,_engine_difficulty__WEBPACK_IMPORTED_MODULE_1__.getDifficultyState)().environment;\n// Base/shared materials & geometries (cloned where per-mesh state is needed)\nconst shared = {\n    terrainBase: new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n        color: 0x506a52,\n        roughness: 0.95,\n        metalness: 0,\n        transparent: true,\n        opacity: 1.0,\n        dithering: true\n    }),\n    rockMat: new three__WEBPACK_IMPORTED_MODULE_2__.MeshStandardMaterial({\n        color: 0x4a4f44,\n        roughness: 0.8,\n        metalness: 0.1\n    }),\n    rockGeo: new three__WEBPACK_IMPORTED_MODULE_2__.IcosahedronGeometry(2.0, 1)\n};\n/* ──────────────────────────────────────────────────────────────────────────\n   GEOMETRY BUILDERS\n   ────────────────────────────────────────────────────────────────────────── */ // 1) Build the main height-mapped plane\nfunction buildTerrainPlane(ix, iz) {\n    // Note: wSegs/hSegs === GRID_SEGMENTS → (GRID_SEGMENTS+1)^2 vertices\n    const g = new three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry(CHUNK_SIZE, CHUNK_SIZE, GRID_SEGMENTS, GRID_SEGMENTS);\n    g.rotateX(-Math.PI / 2);\n    const pos = g.attributes.position;\n    for(let i = 0; i < pos.count; i++){\n        const vx = pos.getX(i) + ix * CHUNK_SIZE;\n        const vz = pos.getZ(i) + iz * CHUNK_SIZE;\n        pos.setY(i, (0,_generateHeight__WEBPACK_IMPORTED_MODULE_0__.heightAt)(vx, vz));\n    }\n    pos.needsUpdate = true;\n    // UV tiling for the color map\n    const uv = g.attributes.uv;\n    for(let i = 0; i < uv.count; i++){\n        uv.setXY(i, uv.getX(i) * TILE_REPEAT, uv.getY(i) * TILE_REPEAT);\n    }\n    uv.needsUpdate = true;\n    g.computeVertexNormals();\n    return g;\n}\n// 2) Build a vertical “skirt” ring around the chunk edges, welded to the top edge\nfunction buildSkirt(ix, iz) {\n    // Each side has GRID_SEGMENTS segments ⇒ GRID_SEGMENTS+1 edge vertices\n    const edgeVerts = GRID_SEGMENTS + 1;\n    const seg = CHUNK_SIZE / GRID_SEGMENTS;\n    // We’ll create 4 sides, each with a strip of (edgeVerts) quads = (edgeVerts-1)*2 triangles\n    const positions = [];\n    const uvs = [];\n    const indices = [];\n    // helper to push a vertical pair (top,bottom) and return the index of the TOP\n    const pushPair = (xLocal, zLocal)=>{\n        const worldX = ix * CHUNK_SIZE + xLocal;\n        const worldZ = iz * CHUNK_SIZE + zLocal;\n        const topY = (0,_generateHeight__WEBPACK_IMPORTED_MODULE_0__.heightAt)(worldX, worldZ);\n        const bottomY = topY - SKIRT_DROP;\n        const baseIdx = positions.length / 3;\n        // top\n        positions.push(xLocal, topY, zLocal);\n        uvs.push((xLocal + HALF) / CHUNK_SIZE, (zLocal + HALF) / CHUNK_SIZE);\n        // bottom\n        positions.push(xLocal, bottomY, zLocal);\n        uvs.push((xLocal + HALF) / CHUNK_SIZE, (zLocal + HALF) / CHUNK_SIZE);\n        return baseIdx // index of the top; bottom is baseIdx+1\n        ;\n    };\n    // helper to connect two consecutive pairs as a vertical quad\n    const pushQuad = (iTopA, iTopB)=>{\n        const iBotA = iTopA + 1;\n        const iBotB = iTopB + 1;\n        indices.push(iTopA, iTopB, iBotB);\n        indices.push(iTopA, iBotB, iBotA);\n    };\n    // top edge (z = +HALF), left→right\n    let prevTop = pushPair(-HALF, +HALF);\n    for(let i = 1; i < edgeVerts; i++){\n        const x = -HALF + i * seg;\n        const nextTop = pushPair(x, +HALF);\n        pushQuad(prevTop, nextTop);\n        prevTop = nextTop;\n    }\n    // right edge (x = +HALF), top→bottom\n    prevTop = pushPair(+HALF, +HALF);\n    for(let i = 1; i < edgeVerts; i++){\n        const z = +HALF - i * seg;\n        const nextTop = pushPair(+HALF, z);\n        pushQuad(prevTop, nextTop);\n        prevTop = nextTop;\n    }\n    // bottom edge (z = -HALF), right→left\n    prevTop = pushPair(+HALF, -HALF);\n    for(let i = 1; i < edgeVerts; i++){\n        const x = +HALF - i * seg;\n        const nextTop = pushPair(x, -HALF);\n        pushQuad(prevTop, nextTop);\n        prevTop = nextTop;\n    }\n    // left edge (x = -HALF), bottom→top\n    prevTop = pushPair(-HALF, -HALF);\n    for(let i = 1; i < edgeVerts; i++){\n        const z = -HALF + i * seg;\n        const nextTop = pushPair(-HALF, z);\n        pushQuad(prevTop, nextTop);\n        prevTop = nextTop;\n    }\n    const geo = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n    geo.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n    geo.setAttribute('uv', new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(uvs, 2));\n    geo.setIndex(indices);\n    geo.computeVertexNormals();\n    return geo;\n}\n// 3) Build a full chunk geometry = terrain plane + skirt\nfunction buildChunkGeometry(ix, iz) {\n    const plane = buildTerrainPlane(ix, iz);\n    const skirt = buildSkirt(ix, iz);\n    const merged = (0,three_examples_jsm_utils_BufferGeometryUtils_js__WEBPACK_IMPORTED_MODULE_3__.mergeGeometries)([\n        plane,\n        skirt\n    ], false);\n    merged.computeVertexNormals();\n    plane.dispose();\n    skirt.dispose();\n    return merged;\n}\n/* ──────────────────────────────────────────────────────────────────────────\n   DECORATIONS\n   ────────────────────────────────────────────────────────────────────────── */ function decorateChunk(mesh) {\n    // Clear previous decorations (safe dispose)\n    const previous = mesh.userData.decorations;\n    if (previous === null || previous === void 0 ? void 0 : previous.length) {\n        for (const obj of previous){\n            mesh.remove(obj);\n            if (obj instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh) {\n                obj.geometry.dispose();\n                obj.dispose();\n            } else {\n                obj.traverse((c)=>{\n                    var _m_dispose;\n                    if (c.geometry) c.geometry.dispose();\n                    const m = c.material;\n                    if (Array.isArray(m)) m.forEach((mm)=>{\n                        var _mm_dispose;\n                        return (_mm_dispose = mm.dispose) === null || _mm_dispose === void 0 ? void 0 : _mm_dispose.call(mm);\n                    });\n                    else m === null || m === void 0 ? void 0 : (_m_dispose = m.dispose) === null || _m_dispose === void 0 ? void 0 : _m_dispose.call(m);\n                });\n            }\n        }\n    }\n    mesh.userData.decorations = [];\n    const { propDensity } = envCache;\n    const propCount = Math.max(0, Math.round(propDensity * ROCKS_PER_DENSITY_UNIT));\n    if (propCount === 0) return;\n    // Deterministic scatter per chunk\n    const seed = hash2i(mesh.userData.ix, mesh.userData.iz);\n    const rand = mulberry32(seed);\n    const inst = new three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh(shared.rockGeo, shared.rockMat, propCount);\n    const mat = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\n    const p = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    const q = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\n    const s = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    const up = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 1, 0);\n    const n = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    for(let i = 0; i < propCount; i++){\n        const localX = (rand() - 0.5) * CHUNK_SIZE;\n        const localZ = (rand() - 0.5) * CHUNK_SIZE;\n        const worldX = mesh.userData.ix * CHUNK_SIZE + localX;\n        const worldZ = mesh.userData.iz * CHUNK_SIZE + localZ;\n        const y = (0,_generateHeight__WEBPACK_IMPORTED_MODULE_0__.heightAt)(worldX, worldZ) + 0.6 + rand() * 0.4;\n        p.set(localX, y, localZ);\n        const nn = (0,_generateHeight__WEBPACK_IMPORTED_MODULE_0__.normalAt)(worldX, worldZ);\n        n.set(nn.x, nn.y, nn.z).normalize();\n        const align = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion().setFromUnitVectors(up, n);\n        // small random rotation around normal\n        q.setFromAxisAngle(n, rand() * Math.PI * 2);\n        q.premultiply(align);\n        const k = 0.8 + rand() * 0.5;\n        s.set(k, k, k);\n        mat.compose(p, q, s);\n        inst.setMatrixAt(i, mat);\n    }\n    inst.instanceMatrix.needsUpdate = true;\n    inst.castShadow = true;\n    inst.frustumCulled = false;\n    mesh.add(inst);\n    mesh.userData.decorations.push(inst);\n}\n/* ──────────────────────────────────────────────────────────────────────────\n   CHUNK BUILDER\n   ────────────────────────────────────────────────────────────────────────── */ function buildChunk(ix, iz, textureMap) {\n    const geo = buildChunkGeometry(ix, iz);\n    // ❗ per-chunk material clone so fades don’t affect *all* chunks\n    const mat = shared.terrainBase.clone();\n    mat.map = textureMap !== null && textureMap !== void 0 ? textureMap : null;\n    mat.needsUpdate = true;\n    const mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geo, mat);\n    mesh.position.set(ix * CHUNK_SIZE, 0, iz * CHUNK_SIZE);\n    mesh.receiveShadow = true;\n    mesh.frustumCulled = false; // safer for large, deformed tiles\n    mesh.userData = {\n        ix,\n        iz,\n        decorations: [],\n        fade: {\n            t: 0,\n            from: 0,\n            to: 1,\n            start: 0\n        },\n        removing: false\n    };\n    mesh.material.opacity = 0;\n    decorateChunk(mesh);\n    return mesh;\n}\n/* ──────────────────────────────────────────────────────────────────────────\n   STREAMER\n   ────────────────────────────────────────────────────────────────────────── */ function createStreamer(scene) {\n    const chunks = new Map();\n    const tmp = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\n    const clock = new three__WEBPACK_IMPORTED_MODULE_2__.Clock();\n    let environmentDirty = false;\n    // ── Texture load (asynchronously); newly created chunks will receive it immediately\n    let terrainMap = null;\n    new three__WEBPACK_IMPORTED_MODULE_2__.TextureLoader().load('/textures/32d4a6ff-3da1-4c7c-a742-1d1fa759e394.png', (tex)=>{\n        tex.wrapS = tex.wrapT = three__WEBPACK_IMPORTED_MODULE_2__.RepeatWrapping;\n        var _THREE_SRGBColorSpace;\n        tex.colorSpace = (_THREE_SRGBColorSpace = three__WEBPACK_IMPORTED_MODULE_2__.SRGBColorSpace) !== null && _THREE_SRGBColorSpace !== void 0 ? _THREE_SRGBColorSpace : undefined;\n        tex.anisotropy = 8;\n        terrainMap = tex;\n        // Update existing chunk materials to use the map\n        for (const m of chunks.values()){\n            const mm = m.material;\n            mm.map = tex;\n            mm.needsUpdate = true;\n        }\n    }, undefined, (err)=>console.warn('Terrain texture failed to load; using flat color', err));\n    // ── React to difficulty / environment changes\n    const unsubscribe = (0,_engine_difficulty__WEBPACK_IMPORTED_MODULE_1__.onDifficultyChange)((state)=>{\n        envCache = state.environment;\n        environmentDirty = true;\n    });\n    // ── Ensure a chunk exists\n    function ensure(ix, iz) {\n        const k = key(ix, iz);\n        if (chunks.has(k)) return;\n        const mesh = buildChunk(ix, iz, terrainMap);\n        // schedule fade in\n        mesh.userData.fade = {\n            t: 0,\n            from: 0,\n            to: 1,\n            start: clock.getElapsedTime()\n        };\n        scene.add(mesh);\n        chunks.set(k, mesh);\n    }\n    // ── Mark distant chunks to remove (we’ll fade them in update loop)\n    function markForRemoval(centerX, centerZ, radius) {\n        const cx = toChunk(centerX);\n        const cz = toChunk(centerZ);\n        for (const [k, m] of chunks){\n            const dx = cx - m.userData.ix;\n            const dz = cz - m.userData.iz;\n            const dist = Math.max(Math.abs(dx), Math.abs(dz));\n            if (dist > radius && !m.userData.removing) {\n                m.userData.removing = true;\n                m.userData.fade = {\n                    t: 0,\n                    from: m.material.opacity,\n                    to: 0,\n                    start: clock.getElapsedTime()\n                };\n            }\n        }\n    }\n    // ── Fade step (both in & out), and dispose out-faded chunks\n    function stepFades(now) {\n        const toDelete = [];\n        for (const [k, m] of chunks){\n            const f = m.userData.fade;\n            if (!f) continue;\n            const mm = m.material;\n            const elapsed = now - f.start;\n            const t = three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.clamp(elapsed / FADE_DURATION, 0, 1);\n            mm.opacity = three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.lerp(f.from, f.to, t);\n            if (t >= 1) {\n                // if we just faded out, remove & dispose\n                if (m.userData.removing) {\n                    scene.remove(m);\n                    disposeChunk(m);\n                    chunks.delete(k);\n                } else {\n                    // fade-in finished; clear fade marker\n                    m.userData.fade = null;\n                }\n            }\n        }\n    }\n    // ── Dispose a whole chunk safely\n    function disposeChunk(mesh) {\n        mesh.geometry.dispose();\n        // dispose *per-chunk clone* of terrain material\n        const mm = mesh.material;\n        if (mm.map && mm.map !== terrainMap) mm.map.dispose();\n        mm.dispose();\n        // decorations\n        const decos = mesh.userData.decorations;\n        for (const d of decos !== null && decos !== void 0 ? decos : []){\n            if (d instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh) {\n                d.geometry.dispose();\n                d.dispose();\n            } else {\n                d.traverse((c)=>{\n                    var _mat_dispose;\n                    if (c.geometry) c.geometry.dispose();\n                    const mat = c.material;\n                    if (Array.isArray(mat)) mat.forEach((m)=>{\n                        var _m_dispose;\n                        return (_m_dispose = m.dispose) === null || _m_dispose === void 0 ? void 0 : _m_dispose.call(m);\n                    });\n                    else mat === null || mat === void 0 ? void 0 : (_mat_dispose = mat.dispose) === null || _mat_dispose === void 0 ? void 0 : _mat_dispose.call(mat);\n                });\n            }\n            mesh.remove(d);\n        }\n        mesh.userData.decorations = [];\n    }\n    return {\n        update (pos, dt) {\n            // radius can adjust with density if you wish; keep simple & stable here\n            const radius = ACTIVE_RADIUS;\n            const cx = toChunk(pos.x);\n            const cz = toChunk(pos.z);\n            // create/keep a square of chunks around the player\n            for(let dz = -radius; dz <= radius; dz++){\n                for(let dx = -radius; dx <= radius; dx++){\n                    ensure(cx + dx, cz + dz);\n                }\n            }\n            // mark far chunks for fade-out/removal\n            markForRemoval(pos.x, pos.z, radius);\n            // re-decorate after env change (seeded → no popping)\n            if (environmentDirty) {\n                for (const m of chunks.values())decorateChunk(m);\n                environmentDirty = false;\n            }\n            // fade step\n            stepFades(clock.getElapsedTime());\n        },\n        queryHeight (x, z) {\n            return (0,_generateHeight__WEBPACK_IMPORTED_MODULE_0__.heightAt)(x, z);\n        },\n        queryNormal (x, z) {\n            const n = (0,_generateHeight__WEBPACK_IMPORTED_MODULE_0__.normalAt)(x, z);\n            return tmp.set(n.x, n.y, n.z);\n        },\n        dispose () {\n            unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();\n            for (const m of chunks.values())disposeChunk(m);\n            chunks.clear();\n            // shared resources: don’t dispose shared.terrainBase (used as template)\n            shared.rockGeo.dispose();\n            shared.rockMat.dispose();\n            if (terrainMap) {\n                terrainMap.dispose();\n                terrainMap = null;\n            }\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/world/chunks/streamer.ts\n"));

/***/ })

});