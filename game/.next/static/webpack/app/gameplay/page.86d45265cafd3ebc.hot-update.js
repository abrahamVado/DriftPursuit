"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/gameplay/page",{

/***/ "(app-pages-browser)/./src/weapons/gatling.ts":
/*!********************************!*\
  !*** ./src/weapons/gatling.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGatlingSystem: () => (/* binding */ createGatlingSystem),\n/* harmony export */   createGatlingVisual: () => (/* binding */ createGatlingVisual)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n\nconst DEFAULT_FORWARD = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 1);\nconst TMP_DIRECTION = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst TMP_POSITION = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\nconst TMP_QUATERNION = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();\nfunction createGatlingSystem(options) {\n    const state = {\n        ammo: options.ammo,\n        heat: 0,\n        overheated: false,\n        tracers: [],\n        accumulator: 0\n    };\n    let tracerId = 0;\n    function spawnTracer(context) {\n        const tracer = {\n            id: ++tracerId,\n            origin: context.position.clone(),\n            direction: context.forward.clone(),\n            lifeMs: options.tracerLifeMs\n        };\n        // 1. Impose deterministic spread so tests can predictably assert ray casts.\n        const seed = tracer.id * 12.9898;\n        const yaw = Math.sin(seed) * 0.5 * options.spread;\n        const pitch = Math.sin(seed * 0.5) * 0.5 * options.spread;\n        const rotation = new three__WEBPACK_IMPORTED_MODULE_0__.Euler(pitch, yaw, 0, 'XYZ');\n        tracer.direction.applyEuler(rotation).normalize();\n        if (state.tracers.length >= options.maxTracers) {\n            state.tracers.shift();\n        }\n        state.tracers.push(tracer);\n        return tracer;\n    }\n    function coolDown(dt) {\n        // 2. Dissipate heat over time so prolonged bursts eventually recover.\n        if (state.heat > 0) {\n            state.heat = Math.max(0, state.heat - options.coolRate * dt);\n            if (state.overheated && state.heat <= options.overheatThreshold * 0.25) {\n                state.overheated = false;\n            }\n        }\n    }\n    function update(context, triggerHeld) {\n        const dt = context.dt;\n        for(let i = state.tracers.length - 1; i >= 0; i--){\n            const tracer = state.tracers[i];\n            tracer.lifeMs -= dt * 1000;\n            if (tracer.lifeMs <= 0) {\n                state.tracers.splice(i, 1);\n            }\n        }\n        if (!triggerHeld) {\n            // 3. When idle, only cool the barrels.\n            coolDown(dt);\n            state.accumulator = 0;\n            return {\n                shots: 0\n            };\n        }\n        if (state.overheated || state.ammo <= 0) {\n            coolDown(dt);\n            return {\n                shots: 0\n            };\n        }\n        state.accumulator += dt * options.fireRate;\n        let shots = 0;\n        while(state.accumulator >= 1 && state.ammo > 0 && !state.overheated){\n            spawnTracer(context);\n            state.accumulator -= 1;\n            state.ammo -= 1;\n            state.heat += options.heatPerShot;\n            shots++;\n            if (state.heat >= options.overheatThreshold) {\n                // 4. Flag the weapon as overheated so callers must ease off the trigger.\n                state.overheated = true;\n            }\n        }\n        coolDown(dt);\n        return {\n            shots\n        };\n    }\n    return {\n        update,\n        get state () {\n            return state;\n        },\n        get ammo () {\n            return state.ammo;\n        },\n        get overheated () {\n            return state.overheated;\n        }\n    };\n}\nfunction createGatlingVisual(scene, options) {\n    let palette = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {\n        tracerColor: 0xffff00\n    };\n    const tracers = [];\n    const tracerSpeed = 200; // Assumed units/sec for tracer travel; tweak as needed\n    const tracerLength = 1; // Fixed segment length for visibility\n    // Pre-create maxTracers meshes for reuse (pooling for perf)\n    for(let i = 0; i < options.maxTracers; i++){\n        const material = new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n            color: palette.tracerColor,\n            transparent: true,\n            opacity: 0.8,\n            blending: three__WEBPACK_IMPORTED_MODULE_0__.AdditiveBlending,\n            depthWrite: false\n        });\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BoxGeometry(0.1, 0.1, tracerLength);\n        geometry.translate(0, 0, -tracerLength / 2); // Center the segment\n        const tracer = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(geometry, material);\n        tracer.visible = false;\n        scene.add(tracer);\n        tracers.push(tracer);\n    }\n    let activeTracerIndex = 0; // For cycling through pool\n    function update(state) {\n        // 1. Update existing tracers: Move forward, fade, and hide expired ones.\n        for(let i = 0; i < state.tracers.length; i++){\n            const tracerState = state.tracers[i];\n            const tracerMesh = tracers[activeTracerIndex];\n            activeTracerIndex = (activeTracerIndex + 1) % options.maxTracers;\n            if (tracerState.lifeMs <= 0) {\n                tracerMesh.visible = false;\n                continue;\n            }\n            TMP_DIRECTION.copy(tracerState.direction).normalize();\n            tracerMesh.visible = true;\n            // 2. Position: Start at origin, advance based on elapsed time.\n            const elapsed = (options.tracerLifeMs - tracerState.lifeMs) / 1000; // Sec since spawn\n            TMP_POSITION.copy(tracerState.origin).addScaledVector(TMP_DIRECTION, tracerSpeed * elapsed);\n            tracerMesh.position.copy(TMP_POSITION);\n            // 3. Orient to direction.\n            TMP_QUATERNION.setFromUnitVectors(DEFAULT_FORWARD, TMP_DIRECTION);\n            tracerMesh.quaternion.copy(TMP_QUATERNION);\n            // 4. Fade opacity over life.\n            const progress = 1 - tracerState.lifeMs / options.tracerLifeMs;\n            tracerMesh.material.opacity = 0.8 * (1 - progress);\n            // Optional: Modulate for heat (global overheat tint).\n            if (state.overheated && palette.heatColor) {\n                tracerMesh.material.color.setHex(palette.heatColor);\n            } else {\n                tracerMesh.material.color.setHex(palette.tracerColor);\n            }\n        }\n        // Hide unused tracers.\n        for(let i = state.tracers.length; i < options.maxTracers; i++){\n            tracers[i % options.maxTracers].visible = false;\n        }\n    }\n    function dispose() {\n        // 5. Release GPU buffers when the owning entity despawns to prevent leaks.\n        tracers.forEach((tracer)=>{\n            scene.remove(tracer);\n            tracer.geometry.dispose();\n            tracer.material.dispose();\n        });\n    }\n    return {\n        update,\n        dispose,\n        tracers\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/weapons/gatling.ts\n"));

/***/ })

});