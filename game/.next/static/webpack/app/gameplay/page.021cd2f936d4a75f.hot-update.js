"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/gameplay/page",{

/***/ "(app-pages-browser)/./src/vehicles/shared/simpleController.ts":
/*!*************************************************!*\
  !*** ./src/vehicles/shared/simpleController.ts ***!
  \*************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createController: () => (/* binding */ createController)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _weapons_gatling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/weapons/gatling */ \"(app-pages-browser)/./src/weapons/gatling.ts\");\n/* harmony import */ var _weapons_homingMissile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/weapons/homingMissile */ \"(app-pages-browser)/./src/weapons/homingMissile.ts\");\n/* harmony import */ var _weapons_neonLaser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/weapons/neonLaser */ \"(app-pages-browser)/./src/weapons/neonLaser.ts\");\n/* harmony import */ var _weapons_bomb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/weapons/bomb */ \"(app-pages-browser)/./src/weapons/bomb.ts\");\n/* harmony import */ var _weapons_visuals_homingMissileVisual__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/weapons/visuals/homingMissileVisual */ \"(app-pages-browser)/./src/weapons/visuals/homingMissileVisual.ts\");\n/* harmony import */ var _weapons_visuals_neonLaserVisual__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/weapons/visuals/neonLaserVisual */ \"(app-pages-browser)/./src/weapons/visuals/neonLaserVisual.ts\");\n/* harmony import */ var _weapons_meteorMissile__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/weapons/meteorMissile */ \"(app-pages-browser)/./src/weapons/meteorMissile.ts\");\n\n\n\n\n\n\n\n\nfunction createController(group, scene) {\n    const vel = new three__WEBPACK_IMPORTED_MODULE_7__.Vector3(0, 0, 60);\n    const forward = new three__WEBPACK_IMPORTED_MODULE_7__.Vector3(0, 0, -1);\n    const weaponContext = {\n        position: new three__WEBPACK_IMPORTED_MODULE_7__.Vector3(),\n        forward: new three__WEBPACK_IMPORTED_MODULE_7__.Vector3(0, 0, -1),\n        dt: 0,\n        targets: []\n    };\n    let targetProvider = ()=>[];\n    const gatling = (0,_weapons_gatling__WEBPACK_IMPORTED_MODULE_0__.createGatlingSystem)({\n        fireRate: 25,\n        spread: three__WEBPACK_IMPORTED_MODULE_7__.MathUtils.degToRad(1.5),\n        maxTracers: 32,\n        tracerLifeMs: 250,\n        ammo: 1200,\n        heatPerShot: 1,\n        coolRate: 12,\n        overheatThreshold: 120\n    });\n    const missilesSystem = (0,_weapons_homingMissile__WEBPACK_IMPORTED_MODULE_1__.createHomingMissileSystem)({\n        maxConcurrent: 4,\n        cooldownMs: 1200,\n        ammo: 4,\n        speed: 180,\n        navigationConstant: 3,\n        lockConeDeg: 45,\n        smokeTrailIntervalMs: 80,\n        detonationRadius: 4,\n        maxLifetimeMs: 12000\n    });\n    const missileVisuals = (0,_weapons_visuals_homingMissileVisual__WEBPACK_IMPORTED_MODULE_4__.createHomingMissileVisual)(scene);\n    const meteorSystem = (0,_weapons_meteorMissile__WEBPACK_IMPORTED_MODULE_6__.createMeteorMissileSystem)({\n        maxConcurrent: 2,\n        cooldownMs: 2500,\n        ammo: 2,\n        ejectionDurationMs: 1000,\n        ejectionSpeed: 40,\n        burnSpeed: 220,\n        navigationConstant: 3.5,\n        detonationRadius: 6,\n        smokeTrailIntervalMs: 70,\n        maxLifetimeMs: 15000\n    });\n    const meteorVisuals = (0,_weapons_visuals_homingMissileVisual__WEBPACK_IMPORTED_MODULE_4__.createHomingMissileVisual)(scene);\n    const laserSystem = (0,_weapons_neonLaser__WEBPACK_IMPORTED_MODULE_2__.createNeonLaserSystem)({\n        cooldownMs: 2000,\n        durationMs: 600,\n        range: 800,\n        attenuation: 0.002\n    });\n    const laserVisual = (0,_weapons_visuals_neonLaserVisual__WEBPACK_IMPORTED_MODULE_5__.createNeonLaserVisual)(scene);\n    const bombSystem = (0,_weapons_bomb__WEBPACK_IMPORTED_MODULE_3__.createBombSystem)({\n        maxConcurrent: 2,\n        ammo: 6,\n        fuseMs: 2500,\n        cooldownMs: 1500,\n        aoeRadius: 40,\n        craterRadius: 18,\n        debrisCount: 8,\n        gravity: 30\n    });\n    let speed = 60;\n    let weaponName = 'GATLING';\n    let ammo = gatling.ammo;\n    let missiles = missilesSystem.ammo;\n    let meteorAmmo = meteorSystem.ammo;\n    let laserCooldownMs = laserSystem.cooldownMs;\n    let bombArmed = bombSystem.isArmed;\n    let fireHeld = false;\n    let fireJustPressed = false;\n    let fireJustReleased = false;\n    let meteorHeld = false;\n    let meteorJustPressed = false;\n    function update(dt, input, queryHeight) {\n        // Mouse steering: aim reticle in NDC controls yaw/pitch\n        const targetYaw = input.mouse.x * 0.6;\n        const targetPitch = input.mouse.y * 0.4;\n        group.rotation.y += (targetYaw - group.rotation.y) * (1 - Math.exp(-6 * dt));\n        group.rotation.x += (targetPitch - group.rotation.x) * (1 - Math.exp(-6 * dt));\n        // Keys\n        if (input.pressed('KeyW')) speed += 40 * dt;\n        if (input.pressed('KeyS')) speed -= 40 * dt;\n        if (input.pressed('ShiftLeft')) speed += 80 * dt;\n        if (input.pressed('KeyQ')) group.rotation.z += 1.2 * dt;\n        if (input.pressed('KeyE')) group.rotation.z -= 1.2 * dt;\n        speed = Math.max(10, Math.min(160, speed));\n        // Integrate\n        forward.set(0, 0, -1).applyEuler(group.rotation);\n        vel.copy(forward).multiplyScalar(speed);\n        group.position.addScaledVector(vel, dt);\n        group.userData.speed = speed;\n        // Terrain floor constraint\n        const floor = queryHeight(group.position.x, group.position.z) + 6;\n        if (group.position.y < floor) {\n            group.position.y = floor;\n            vel.y = Math.abs(vel.y) * 0.2;\n        }\n        // Ceiling clamp\n        const ceiling = 2000;\n        if (group.position.y > ceiling) group.position.y = ceiling;\n        const previouslyHeld = fireHeld;\n        fireHeld = Boolean(input.pressed('Space'));\n        fireJustPressed = fireHeld && !previouslyHeld;\n        fireJustReleased = !fireHeld && previouslyHeld;\n        const previouslyMeteorHeld = meteorHeld;\n        meteorHeld = Boolean(input.pressed('Digit1'));\n        meteorJustPressed = meteorHeld && !previouslyMeteorHeld;\n        // Weapons input (placeholders)\n        if (input.pressed('Digit1')) weaponName = 'GATLING';\n        if (input.pressed('Digit2')) weaponName = 'MISSILE';\n        if (input.pressed('Digit3')) weaponName = 'LASER';\n        if (input.pressed('Digit4')) weaponName = 'BOMB';\n        weaponContext.position.copy(group.position);\n        weaponContext.forward.copy(forward);\n        weaponContext.dt = dt;\n        weaponContext.targets = targetProvider();\n        if (meteorJustPressed) {\n            //1.- Kick the Meteor canister clear of the fuselage when the pilot taps slot one.\n            meteorSystem.tryFire(weaponContext);\n        }\n        meteorSystem.update(weaponContext);\n        //2.- Sync the slow-burn launch visuals so the canister and plume remain authoritative.\n        meteorVisuals.update(meteorSystem.missiles);\n        if (weaponName === 'GATLING') {\n            //3.- Advance the hitscan gun and respect trigger state.\n            gatling.update(weaponContext, fireHeld);\n        } else {\n            gatling.update(weaponContext, false);\n        }\n        if (weaponName === 'MISSILE' && fireJustPressed) {\n            //4.- Launch homing missiles when ammo and pool constraints allow.\n            missilesSystem.tryFire(weaponContext);\n        }\n        missilesSystem.update(weaponContext);\n        //5.- Mirror the guidance results into the scene so each missile gains a visible shell.\n        missileVisuals.update(missilesSystem.missiles);\n        if (weaponName === 'LASER') {\n            if (fireJustPressed) {\n                laserSystem.fire(weaponContext);\n            }\n            if (fireHeld) {\n                laserSystem.sustain(weaponContext);\n            }\n            if (fireJustReleased) {\n                laserSystem.release();\n            }\n        } else {\n            if (laserSystem.state.active) {\n                laserSystem.release();\n            }\n        }\n        laserSystem.update(weaponContext);\n        //6.- Stretch and orient the neon beam according to the freshly sampled weapon state.\n        laserVisual.update(laserSystem.state);\n        if (weaponName === 'BOMB' && fireJustPressed) {\n            //7.- Drop a bomb while relaying the terrain sampler to trigger ground detonation.\n            bombSystem.fire({\n                ...weaponContext,\n                sampleGroundHeight: queryHeight\n            });\n        }\n        bombSystem.update({\n            ...weaponContext,\n            sampleGroundHeight: queryHeight\n        });\n        // Cooldowns\n        ammo = gatling.ammo;\n        missiles = missilesSystem.ammo;\n        meteorAmmo = meteorSystem.ammo;\n        laserCooldownMs = laserSystem.cooldownMs;\n        bombArmed = bombSystem.isArmed;\n    }\n    function dispose() {\n        //8.- Tear down transient weapon meshes so hot swaps between vehicles stay safe.\n        missileVisuals.dispose();\n        meteorVisuals.dispose();\n        laserVisual.dispose();\n    }\n    return {\n        update,\n        get speed () {\n            return speed;\n        },\n        get weaponName () {\n            return weaponName;\n        },\n        get ammo () {\n            return ammo;\n        },\n        get missiles () {\n            return missiles;\n        },\n        get meteorAmmo () {\n            return meteorAmmo;\n        },\n        get laserCooldownMs () {\n            return laserCooldownMs;\n        },\n        get bombArmed () {\n            return bombArmed;\n        },\n        setTargetProvider (provider) {\n            targetProvider = provider;\n        },\n        dispose\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/vehicles/shared/simpleController.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/weapons/meteorMissile.ts":
/*!**************************************!*\
  !*** ./src/weapons/meteorMissile.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createMeteorMissileSystem: () => (/* binding */ createMeteorMissileSystem)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(app-pages-browser)/./node_modules/three/build/three.module.js\");\n\nfunction createMeteorMissileSystem(options) {\n    const missiles = [];\n    let ammo = options.ammo;\n    let cooldownMs = 0;\n    let idCounter = 0;\n    const forwardTmp = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const los = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const relVel = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    const navAccel = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();\n    //1.- Provide a cheap lookup so ignition always latches onto the same first viable target.\n    function acquireFirstTarget(targets) {\n        for (const target of targets){\n            if (target.alive) {\n                return target;\n            }\n        }\n        return null;\n    }\n    function detonate(index) {\n        missiles.splice(index, 1);\n    }\n    function update(context) {\n        //2.- Reduce cooldown in real time so callers know when the launcher is ready again.\n        if (cooldownMs > 0) {\n            cooldownMs = Math.max(0, cooldownMs - context.dt * 1000);\n        }\n        for(let i = missiles.length - 1; i >= 0; i--){\n            const missile = missiles[i];\n            missile.lifetimeMs += context.dt * 1000;\n            missile.stageMs += context.dt * 1000;\n            if (missile.lifetimeMs > options.maxLifetimeMs) {\n                detonate(i);\n                continue;\n            }\n            if (missile.stage === 'ejecting' && missile.stageMs >= options.ejectionDurationMs) {\n                //3.- On ignition, grab the earliest living target and switch to the powered flight profile.\n                const target = acquireFirstTarget(context.targets);\n                if (!target) {\n                    detonate(i);\n                    continue;\n                }\n                missile.stage = 'burning';\n                missile.stageMs = 0;\n                missile.targetId = target.id;\n                los.copy(target.position).sub(missile.position);\n                if (los.lengthSq() > 0.0001) {\n                    los.normalize();\n                    missile.velocity.copy(los).multiplyScalar(options.burnSpeed);\n                } else {\n                    missile.velocity.set(0, 0, -options.burnSpeed);\n                }\n            }\n            if (missile.stage === 'burning') {\n                var _context_targets_find;\n                let target = (_context_targets_find = context.targets.find((t)=>t.id === missile.targetId && t.alive)) !== null && _context_targets_find !== void 0 ? _context_targets_find : null;\n                if (!target) {\n                    //4.- If the locked contact vanishes, immediately bind to the next available target.\n                    target = acquireFirstTarget(context.targets);\n                    if (!target) {\n                        detonate(i);\n                        continue;\n                    }\n                    missile.targetId = target.id;\n                }\n                los.copy(target.position).sub(missile.position);\n                const distance = los.length();\n                if (distance < options.detonationRadius) {\n                    detonate(i);\n                    continue;\n                }\n                los.normalize();\n                relVel.copy(target.velocity).sub(missile.velocity);\n                navAccel.copy(relVel.cross(los).cross(los)).multiplyScalar(options.navigationConstant);\n                missile.velocity.addScaledVector(navAccel, context.dt);\n                missile.velocity.setLength(options.burnSpeed);\n            }\n            missile.position.addScaledVector(missile.velocity, context.dt);\n            missile.smokeAccumulatorMs += context.dt * 1000;\n            const shouldEmit = missile.stage === 'burning';\n            if (shouldEmit && missile.smokeAccumulatorMs >= options.smokeTrailIntervalMs) {\n                //5.- Drop contrail markers to draw the powered flight path with a simple line strip.\n                missile.smokeAccumulatorMs = 0;\n                missile.smokeTrail.push(missile.position.clone());\n                if (missile.smokeTrail.length > 32) {\n                    missile.smokeTrail.shift();\n                }\n            }\n        }\n    }\n    function tryFire(context) {\n        if (ammo <= 0) return {\n            fired: false,\n            reason: 'empty'\n        };\n        if (cooldownMs > 0) return {\n            fired: false,\n            reason: 'cooldown'\n        };\n        if (missiles.length >= options.maxConcurrent) return {\n            fired: false,\n            reason: 'pool'\n        };\n        const missile = {\n            id: ++idCounter,\n            position: context.position.clone(),\n            velocity: forwardTmp.copy(context.forward).multiplyScalar(options.ejectionSpeed),\n            targetId: null,\n            lifetimeMs: 0,\n            smokeTrail: [],\n            smokeAccumulatorMs: 0,\n            stage: 'ejecting',\n            stageMs: 0\n        };\n        missiles.push(missile);\n        ammo -= 1;\n        cooldownMs = options.cooldownMs;\n        return {\n            fired: true,\n            missile\n        };\n    }\n    return {\n        update,\n        tryFire,\n        get ammo () {\n            return ammo;\n        },\n        get cooldownMs () {\n            return cooldownMs;\n        },\n        get activeCount () {\n            return missiles.length;\n        },\n        get missiles () {\n            return missiles;\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/weapons/meteorMissile.ts\n"));

/***/ })

});