// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: go-broker/internal/proto/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Vector3 } from "./types";

export const protobufPackage = "driftpursuit.networking.v1";

export enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0,
  EVENT_TYPE_SPAWNED = 1,
  EVENT_TYPE_DESTROYED = 2,
  EVENT_TYPE_COLLISION = 3,
  EVENT_TYPE_OBJECTIVE_CAPTURED = 4,
  EVENT_TYPE_SCORE_UPDATE = 5,
  EVENT_TYPE_SENSOR_CONTACT = 6,
  UNRECOGNIZED = -1,
}

export enum CombatEventKind {
  COMBAT_EVENT_KIND_UNSPECIFIED = 0,
  COMBAT_EVENT_KIND_WEAPON_FIRED = 1,
  COMBAT_EVENT_KIND_DIRECT_HIT = 2,
  COMBAT_EVENT_KIND_AREA_EFFECT = 3,
  COMBAT_EVENT_KIND_KILL_CONFIRMED = 4,
  COMBAT_EVENT_KIND_SHIELD_BREAK = 5,
  UNRECOGNIZED = -1,
}

/** Event stream emitted alongside snapshots describing discrete gameplay updates. */
export interface GameEvent {
  schemaVersion: string;
  eventId: string;
  occurredAtMs: number;
  type: EventType;
  primaryEntityId: string;
  relatedEntityIds: string[];
  metadata: { [key: string]: string };
}

export interface GameEvent_MetadataEntry {
  key: string;
  value: string;
}

/** CombatEvent conveys detailed combat telemetry for analytics and HUD updates. */
export interface CombatEvent {
  schemaVersion: string;
  eventId: string;
  occurredAtMs: number;
  kind: CombatEventKind;
  attackerEntityId: string;
  defenderEntityId: string;
  position: Vector3 | undefined;
  direction: Vector3 | undefined;
  damage: DamageSummary | undefined;
  metadata: { [key: string]: string };
}

export interface CombatEvent_MetadataEntry {
  key: string;
  value: string;
}

/** DamageSummary captures the numeric and categorical breakdown of combat damage. */
export interface DamageSummary {
  amount: number;
  type: string;
  critical: boolean;
}

function createBaseGameEvent(): GameEvent {
  return {
    schemaVersion: "",
    eventId: "",
    occurredAtMs: 0,
    type: 0,
    primaryEntityId: "",
    relatedEntityIds: [],
    metadata: {},
  };
}

export const GameEvent: MessageFns<GameEvent> = {
  encode(message: GameEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.occurredAtMs !== 0) {
      writer.uint32(24).int64(message.occurredAtMs);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.primaryEntityId !== "") {
      writer.uint32(42).string(message.primaryEntityId);
    }
    for (const v of message.relatedEntityIds) {
      writer.uint32(50).string(v!);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      GameEvent_MetadataEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.occurredAtMs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.primaryEntityId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.relatedEntityIds.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = GameEvent_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GameEvent>, I>>(base?: I): GameEvent {
    return GameEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameEvent>, I>>(object: I): GameEvent {
    const message = createBaseGameEvent();
    message.schemaVersion = object.schemaVersion ?? "";
    message.eventId = object.eventId ?? "";
    message.occurredAtMs = object.occurredAtMs ?? 0;
    message.type = object.type ?? 0;
    message.primaryEntityId = object.primaryEntityId ?? "";
    message.relatedEntityIds = object.relatedEntityIds?.map((e) => e) || [];
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseGameEvent_MetadataEntry(): GameEvent_MetadataEntry {
  return { key: "", value: "" };
}

export const GameEvent_MetadataEntry: MessageFns<GameEvent_MetadataEntry> = {
  encode(message: GameEvent_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameEvent_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameEvent_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<GameEvent_MetadataEntry>, I>>(base?: I): GameEvent_MetadataEntry {
    return GameEvent_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameEvent_MetadataEntry>, I>>(object: I): GameEvent_MetadataEntry {
    const message = createBaseGameEvent_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCombatEvent(): CombatEvent {
  return {
    schemaVersion: "",
    eventId: "",
    occurredAtMs: 0,
    kind: 0,
    attackerEntityId: "",
    defenderEntityId: "",
    position: undefined,
    direction: undefined,
    damage: undefined,
    metadata: {},
  };
}

export const CombatEvent: MessageFns<CombatEvent> = {
  encode(message: CombatEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.occurredAtMs !== 0) {
      writer.uint32(24).int64(message.occurredAtMs);
    }
    if (message.kind !== 0) {
      writer.uint32(32).int32(message.kind);
    }
    if (message.attackerEntityId !== "") {
      writer.uint32(42).string(message.attackerEntityId);
    }
    if (message.defenderEntityId !== "") {
      writer.uint32(50).string(message.defenderEntityId);
    }
    if (message.position !== undefined) {
      Vector3.encode(message.position, writer.uint32(58).fork()).join();
    }
    if (message.direction !== undefined) {
      Vector3.encode(message.direction, writer.uint32(66).fork()).join();
    }
    if (message.damage !== undefined) {
      DamageSummary.encode(message.damage, writer.uint32(74).fork()).join();
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      CombatEvent_MetadataEntry.encode({ key: key as any, value }, writer.uint32(82).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CombatEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCombatEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.occurredAtMs = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.attackerEntityId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.defenderEntityId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.position = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.direction = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.damage = DamageSummary.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          const entry10 = CombatEvent_MetadataEntry.decode(reader, reader.uint32());
          if (entry10.value !== undefined) {
            message.metadata[entry10.key] = entry10.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CombatEvent>, I>>(base?: I): CombatEvent {
    return CombatEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CombatEvent>, I>>(object: I): CombatEvent {
    const message = createBaseCombatEvent();
    message.schemaVersion = object.schemaVersion ?? "";
    message.eventId = object.eventId ?? "";
    message.occurredAtMs = object.occurredAtMs ?? 0;
    message.kind = object.kind ?? 0;
    message.attackerEntityId = object.attackerEntityId ?? "";
    message.defenderEntityId = object.defenderEntityId ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Vector3.fromPartial(object.position)
      : undefined;
    message.direction = (object.direction !== undefined && object.direction !== null)
      ? Vector3.fromPartial(object.direction)
      : undefined;
    message.damage = (object.damage !== undefined && object.damage !== null)
      ? DamageSummary.fromPartial(object.damage)
      : undefined;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseCombatEvent_MetadataEntry(): CombatEvent_MetadataEntry {
  return { key: "", value: "" };
}

export const CombatEvent_MetadataEntry: MessageFns<CombatEvent_MetadataEntry> = {
  encode(message: CombatEvent_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CombatEvent_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCombatEvent_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<CombatEvent_MetadataEntry>, I>>(base?: I): CombatEvent_MetadataEntry {
    return CombatEvent_MetadataEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CombatEvent_MetadataEntry>, I>>(object: I): CombatEvent_MetadataEntry {
    const message = createBaseCombatEvent_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDamageSummary(): DamageSummary {
  return { amount: 0, type: "", critical: false };
}

export const DamageSummary: MessageFns<DamageSummary> = {
  encode(message: DamageSummary, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== 0) {
      writer.uint32(9).double(message.amount);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.critical !== false) {
      writer.uint32(24).bool(message.critical);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DamageSummary {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDamageSummary();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.critical = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create<I extends Exact<DeepPartial<DamageSummary>, I>>(base?: I): DamageSummary {
    return DamageSummary.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DamageSummary>, I>>(object: I): DamageSummary {
    const message = createBaseDamageSummary();
    message.amount = object.amount ?? 0;
    message.type = object.type ?? "";
    message.critical = object.critical ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
