// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: go-broker/internal/proto/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "driftpursuit.networking.v1";

/** Canonical interest tiers used by the broker to bucket subscriptions. */
export enum InterestTier {
  INTEREST_TIER_UNSPECIFIED = 0,
  /** INTEREST_TIER_SELF - The observing entity itself; always delivered. */
  INTEREST_TIER_SELF = 1,
  /** INTEREST_TIER_NEARBY - Entities within the close range bubble receive the full state stream. */
  INTEREST_TIER_NEARBY = 2,
  /** INTEREST_TIER_RADAR - Entities inside the observer's radar volume receive degraded updates. */
  INTEREST_TIER_RADAR = 3,
  /** INTEREST_TIER_EXTENDED - Entities outside radar range but still relevant for global awareness. */
  INTEREST_TIER_EXTENDED = 4,
  /** INTEREST_TIER_PASSIVE - Dormant or destroyed entities only appear in high level summaries. */
  INTEREST_TIER_PASSIVE = 5,
  UNRECOGNIZED = -1,
}

export function interestTierFromJSON(object: any): InterestTier {
  switch (object) {
    case 0:
    case "INTEREST_TIER_UNSPECIFIED":
      return InterestTier.INTEREST_TIER_UNSPECIFIED;
    case 1:
    case "INTEREST_TIER_SELF":
      return InterestTier.INTEREST_TIER_SELF;
    case 2:
    case "INTEREST_TIER_NEARBY":
      return InterestTier.INTEREST_TIER_NEARBY;
    case 3:
    case "INTEREST_TIER_RADAR":
      return InterestTier.INTEREST_TIER_RADAR;
    case 4:
    case "INTEREST_TIER_EXTENDED":
      return InterestTier.INTEREST_TIER_EXTENDED;
    case 5:
    case "INTEREST_TIER_PASSIVE":
      return InterestTier.INTEREST_TIER_PASSIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return InterestTier.UNRECOGNIZED;
  }
}

export function interestTierToJSON(object: InterestTier): string {
  switch (object) {
    case InterestTier.INTEREST_TIER_UNSPECIFIED:
      return "INTEREST_TIER_UNSPECIFIED";
    case InterestTier.INTEREST_TIER_SELF:
      return "INTEREST_TIER_SELF";
    case InterestTier.INTEREST_TIER_NEARBY:
      return "INTEREST_TIER_NEARBY";
    case InterestTier.INTEREST_TIER_RADAR:
      return "INTEREST_TIER_RADAR";
    case InterestTier.INTEREST_TIER_EXTENDED:
      return "INTEREST_TIER_EXTENDED";
    case InterestTier.INTEREST_TIER_PASSIVE:
      return "INTEREST_TIER_PASSIVE";
    case InterestTier.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Semantic version of the networking schema carried in every payload. */
export interface SchemaVersion {
  major: number;
  minor: number;
  patch: number;
}

/** 3D vector in meters, relative to the simulation origin. */
export interface Vector3 {
  x: number;
  y: number;
  z: number;
}

/** Euler orientation in degrees following aerospace conventions. */
export interface Orientation {
  yawDeg: number;
  pitchDeg: number;
  rollDeg: number;
}

function createBaseSchemaVersion(): SchemaVersion {
  return { major: 0, minor: 0, patch: 0 };
}

export const SchemaVersion: MessageFns<SchemaVersion> = {
  encode(message: SchemaVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.major !== 0) {
      writer.uint32(8).uint32(message.major);
    }
    if (message.minor !== 0) {
      writer.uint32(16).uint32(message.minor);
    }
    if (message.patch !== 0) {
      writer.uint32(24).uint32(message.patch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.major = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.minor = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.patch = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaVersion {
    return {
      major: isSet(object.major) ? globalThis.Number(object.major) : 0,
      minor: isSet(object.minor) ? globalThis.Number(object.minor) : 0,
      patch: isSet(object.patch) ? globalThis.Number(object.patch) : 0,
    };
  },

  toJSON(message: SchemaVersion): unknown {
    const obj: any = {};
    if (message.major !== 0) {
      obj.major = Math.round(message.major);
    }
    if (message.minor !== 0) {
      obj.minor = Math.round(message.minor);
    }
    if (message.patch !== 0) {
      obj.patch = Math.round(message.patch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SchemaVersion>, I>>(base?: I): SchemaVersion {
    return SchemaVersion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SchemaVersion>, I>>(object: I): SchemaVersion {
    const message = createBaseSchemaVersion();
    message.major = object.major ?? 0;
    message.minor = object.minor ?? 0;
    message.patch = object.patch ?? 0;
    return message;
  },
};

function createBaseVector3(): Vector3 {
  return { x: 0, y: 0, z: 0 };
}

export const Vector3: MessageFns<Vector3> = {
  encode(message: Vector3, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.x !== 0) {
      writer.uint32(9).double(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(17).double(message.y);
    }
    if (message.z !== 0) {
      writer.uint32(25).double(message.z);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vector3 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVector3();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.x = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.y = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.z = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vector3 {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      z: isSet(object.z) ? globalThis.Number(object.z) : 0,
    };
  },

  toJSON(message: Vector3): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = message.x;
    }
    if (message.y !== 0) {
      obj.y = message.y;
    }
    if (message.z !== 0) {
      obj.z = message.z;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vector3>, I>>(base?: I): Vector3 {
    return Vector3.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vector3>, I>>(object: I): Vector3 {
    const message = createBaseVector3();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.z = object.z ?? 0;
    return message;
  },
};

function createBaseOrientation(): Orientation {
  return { yawDeg: 0, pitchDeg: 0, rollDeg: 0 };
}

export const Orientation: MessageFns<Orientation> = {
  encode(message: Orientation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.yawDeg !== 0) {
      writer.uint32(9).double(message.yawDeg);
    }
    if (message.pitchDeg !== 0) {
      writer.uint32(17).double(message.pitchDeg);
    }
    if (message.rollDeg !== 0) {
      writer.uint32(25).double(message.rollDeg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Orientation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrientation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.yawDeg = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.pitchDeg = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.rollDeg = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Orientation {
    return {
      yawDeg: isSet(object.yawDeg) ? globalThis.Number(object.yawDeg) : 0,
      pitchDeg: isSet(object.pitchDeg) ? globalThis.Number(object.pitchDeg) : 0,
      rollDeg: isSet(object.rollDeg) ? globalThis.Number(object.rollDeg) : 0,
    };
  },

  toJSON(message: Orientation): unknown {
    const obj: any = {};
    if (message.yawDeg !== 0) {
      obj.yawDeg = message.yawDeg;
    }
    if (message.pitchDeg !== 0) {
      obj.pitchDeg = message.pitchDeg;
    }
    if (message.rollDeg !== 0) {
      obj.rollDeg = message.rollDeg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Orientation>, I>>(base?: I): Orientation {
    return Orientation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Orientation>, I>>(object: I): Orientation {
    const message = createBaseOrientation();
    message.yawDeg = object.yawDeg ?? 0;
    message.pitchDeg = object.pitchDeg ?? 0;
    message.rollDeg = object.rollDeg ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
