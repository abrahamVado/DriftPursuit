// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: go-broker/internal/proto/vehicle.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Orientation, Vector3 } from "./types";

export const protobufPackage = "driftpursuit.networking.v1";

/** Detailed physical and control state for a single vehicle. */
export interface VehicleState {
  schemaVersion: string;
  vehicleId: string;
  position?: Vector3 | undefined;
  velocity?: Vector3 | undefined;
  orientation?:
    | Orientation
    | undefined;
  /** Angular velocity in degrees per second around XYZ axes. */
  angularVelocity?:
    | Vector3
    | undefined;
  /** Forward speed magnitude in meters per second. */
  speedMps: number;
  /** Commanded forward thrust as a percentage between -1.0 and 1.0. */
  throttlePct: number;
  /** Commanded vertical thruster input between -1.0 (down) and 1.0 (up). */
  verticalThrustPct: number;
  /** Available boost throttle expressed as a 0-1 range. */
  boostPct: number;
  /** Indicates whether boost is actively firing this frame. */
  boostActive: boolean;
  /** Indicates whether the assisted flight mode is engaged. */
  flightAssistEnabled: boolean;
  /** Remaining energy reserve as a percentage (0-1) of capacity. */
  energyRemainingPct: number;
  /** UTC timestamp for this state in milliseconds. */
  updatedAtMs: number;
}

function createBaseVehicleState(): VehicleState {
  return {
    schemaVersion: "",
    vehicleId: "",
    position: undefined,
    velocity: undefined,
    orientation: undefined,
    angularVelocity: undefined,
    speedMps: 0,
    throttlePct: 0,
    verticalThrustPct: 0,
    boostPct: 0,
    boostActive: false,
    flightAssistEnabled: false,
    energyRemainingPct: 0,
    updatedAtMs: 0,
  };
}

export const VehicleState: MessageFns<VehicleState> = {
  encode(message: VehicleState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schemaVersion !== "") {
      writer.uint32(10).string(message.schemaVersion);
    }
    if (message.vehicleId !== "") {
      writer.uint32(18).string(message.vehicleId);
    }
    if (message.position !== undefined) {
      Vector3.encode(message.position, writer.uint32(26).fork()).join();
    }
    if (message.velocity !== undefined) {
      Vector3.encode(message.velocity, writer.uint32(34).fork()).join();
    }
    if (message.orientation !== undefined) {
      Orientation.encode(message.orientation, writer.uint32(42).fork()).join();
    }
    if (message.angularVelocity !== undefined) {
      Vector3.encode(message.angularVelocity, writer.uint32(50).fork()).join();
    }
    if (message.speedMps !== 0) {
      writer.uint32(57).double(message.speedMps);
    }
    if (message.throttlePct !== 0) {
      writer.uint32(65).double(message.throttlePct);
    }
    if (message.verticalThrustPct !== 0) {
      writer.uint32(73).double(message.verticalThrustPct);
    }
    if (message.boostPct !== 0) {
      writer.uint32(81).double(message.boostPct);
    }
    if (message.boostActive !== false) {
      writer.uint32(88).bool(message.boostActive);
    }
    if (message.flightAssistEnabled !== false) {
      writer.uint32(96).bool(message.flightAssistEnabled);
    }
    if (message.energyRemainingPct !== 0) {
      writer.uint32(105).double(message.energyRemainingPct);
    }
    if (message.updatedAtMs !== 0) {
      writer.uint32(112).int64(message.updatedAtMs);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VehicleState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVehicleState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.vehicleId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.position = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.velocity = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.orientation = Orientation.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.angularVelocity = Vector3.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.speedMps = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.throttlePct = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.verticalThrustPct = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.boostPct = reader.double();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.boostActive = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.flightAssistEnabled = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 105) {
            break;
          }

          message.energyRemainingPct = reader.double();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.updatedAtMs = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VehicleState {
    return {
      schemaVersion: isSet(object.schemaVersion) ? globalThis.String(object.schemaVersion) : "",
      vehicleId: isSet(object.vehicleId) ? globalThis.String(object.vehicleId) : "",
      position: isSet(object.position) ? Vector3.fromJSON(object.position) : undefined,
      velocity: isSet(object.velocity) ? Vector3.fromJSON(object.velocity) : undefined,
      orientation: isSet(object.orientation) ? Orientation.fromJSON(object.orientation) : undefined,
      angularVelocity: isSet(object.angularVelocity) ? Vector3.fromJSON(object.angularVelocity) : undefined,
      speedMps: isSet(object.speedMps) ? globalThis.Number(object.speedMps) : 0,
      throttlePct: isSet(object.throttlePct) ? globalThis.Number(object.throttlePct) : 0,
      verticalThrustPct: isSet(object.verticalThrustPct) ? globalThis.Number(object.verticalThrustPct) : 0,
      boostPct: isSet(object.boostPct) ? globalThis.Number(object.boostPct) : 0,
      boostActive: isSet(object.boostActive) ? globalThis.Boolean(object.boostActive) : false,
      flightAssistEnabled: isSet(object.flightAssistEnabled) ? globalThis.Boolean(object.flightAssistEnabled) : false,
      energyRemainingPct: isSet(object.energyRemainingPct) ? globalThis.Number(object.energyRemainingPct) : 0,
      updatedAtMs: isSet(object.updatedAtMs) ? globalThis.Number(object.updatedAtMs) : 0,
    };
  },

  toJSON(message: VehicleState): unknown {
    const obj: any = {};
    if (message.schemaVersion !== "") {
      obj.schemaVersion = message.schemaVersion;
    }
    if (message.vehicleId !== "") {
      obj.vehicleId = message.vehicleId;
    }
    if (message.position !== undefined) {
      obj.position = Vector3.toJSON(message.position);
    }
    if (message.velocity !== undefined) {
      obj.velocity = Vector3.toJSON(message.velocity);
    }
    if (message.orientation !== undefined) {
      obj.orientation = Orientation.toJSON(message.orientation);
    }
    if (message.angularVelocity !== undefined) {
      obj.angularVelocity = Vector3.toJSON(message.angularVelocity);
    }
    if (message.speedMps !== 0) {
      obj.speedMps = message.speedMps;
    }
    if (message.throttlePct !== 0) {
      obj.throttlePct = message.throttlePct;
    }
    if (message.verticalThrustPct !== 0) {
      obj.verticalThrustPct = message.verticalThrustPct;
    }
    if (message.boostPct !== 0) {
      obj.boostPct = message.boostPct;
    }
    if (message.boostActive !== false) {
      obj.boostActive = message.boostActive;
    }
    if (message.flightAssistEnabled !== false) {
      obj.flightAssistEnabled = message.flightAssistEnabled;
    }
    if (message.energyRemainingPct !== 0) {
      obj.energyRemainingPct = message.energyRemainingPct;
    }
    if (message.updatedAtMs !== 0) {
      obj.updatedAtMs = Math.round(message.updatedAtMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VehicleState>, I>>(base?: I): VehicleState {
    return VehicleState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VehicleState>, I>>(object: I): VehicleState {
    const message = createBaseVehicleState();
    message.schemaVersion = object.schemaVersion ?? "";
    message.vehicleId = object.vehicleId ?? "";
    message.position = (object.position !== undefined && object.position !== null)
      ? Vector3.fromPartial(object.position)
      : undefined;
    message.velocity = (object.velocity !== undefined && object.velocity !== null)
      ? Vector3.fromPartial(object.velocity)
      : undefined;
    message.orientation = (object.orientation !== undefined && object.orientation !== null)
      ? Orientation.fromPartial(object.orientation)
      : undefined;
    message.angularVelocity = (object.angularVelocity !== undefined && object.angularVelocity !== null)
      ? Vector3.fromPartial(object.angularVelocity)
      : undefined;
    message.speedMps = object.speedMps ?? 0;
    message.throttlePct = object.throttlePct ?? 0;
    message.verticalThrustPct = object.verticalThrustPct ?? 0;
    message.boostPct = object.boostPct ?? 0;
    message.boostActive = object.boostActive ?? false;
    message.flightAssistEnabled = object.flightAssistEnabled ?? false;
    message.energyRemainingPct = object.energyRemainingPct ?? 0;
    message.updatedAtMs = object.updatedAtMs ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
