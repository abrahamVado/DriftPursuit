syntax = "proto3";

package driftpursuit.broker.v0;

option go_package = "driftpursuit/broker/internal/proto/pb;pb";

// StreamStateDiffsRequest registers a bot to receive authoritative state diffs.
message StreamStateDiffsRequest {
  //1.- client_id lets the broker attribute throttling metrics to the stream source.
  string client_id = 1;
}

// StateDiffFrame carries a compressed JSON diff for a single simulation tick.
message StateDiffFrame {
  //1.- tick identifies the authoritative simulation tick for reconciliation.
  uint64 tick = 1;
  //2.- encoding specifies the compression codec applied to the payload.
  string encoding = 2;
  //3.- payload contains the compressed JSON representation of the world diff.
  bytes payload = 3;
}

// IntentFrame uploads a compressed JSON intent payload from a bot controller.
message IntentFrame {
  //1.- client_id identifies the publishing stream for sequencing and metrics.
  string client_id = 1;
  //2.- encoding indicates how the payload bytes were compressed (for example "gzip").
  string encoding = 2;
  //3.- payload holds the compressed JSON representation of the driftpursuit.broker.v0.Intent message.
  bytes payload = 3;
}

// IntentStreamAck summarises the accepted and rejected frames after a publish session.
message IntentStreamAck {
  //1.- accepted counts how many intents were ingested successfully.
  uint64 accepted = 1;
  //2.- rejected counts how many intents were dropped due to validation or decoding failures.
  uint64 rejected = 2;
}

service BrokerStreamService {
  // StreamStateDiffs pushes compressed world diffs to connected bots.
  rpc StreamStateDiffs(StreamStateDiffsRequest) returns (stream StateDiffFrame);
  // PublishIntents ingests compressed control intents from bots.
  rpc PublishIntents(stream IntentFrame) returns (IntentStreamAck);
}
